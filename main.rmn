// imports are "modport based", a folder or libraries functionalities most only be accessible if and 
   under conditions that the modport.rmn in the folders root provides it, 

->> std
        networking

->> DSA
        Algorithms
            graphs
                BFS
                DFS
                    Ford_Fulkerson, Dijkstra
            DP
                top_down
                bottom_up
            search
                binarySearch, linearSearch
            sort
                bubbleSort, quickSort, 
        data structures

->> Tensorflow as tf 
        core.NN
            stuff, other stuff
        threading
            green
                nvidia
                intel

->> Qt 




""" for documenting functions, objects, libraries, ... """


fun Main

    // str name // uninitialized variable is not allowed
    input str name // initialize var same when in use
    log "Hello world, my name is $name \n "
    x1 <- 2
    x2 <- 4
    log "$x1 plus $x2 equals $(x1+x2)"

    // do stuff
    // it can execute like JS & PY(notebook by notebook) or like C,C++,Rust(from Main)


global const int PI <- 3.14159

static int count <- 0

x = 12
auto x <- anyType
mut auto x <- anyType // mut allows variable mutability
i8 x <- -1
i16 x <- -1
i32 x <- -1
i64 x <- -1
i128 x <- -1
int x <- -1
[i32] x <- [-23 54] // array of int, arrays are zero index based
[i32] x <- [n^2 loop n in 1..5]
mut [int] x <- [-23 54] //indexing of elements in collections start from 1 not 0
[[i32]] x <- [213 444; 2 134 74] // multi dimensional array of int
[[i32]] x <- [1..5; 2..10:2] // multi dimensional array of int

varX <- x[first] // index 0 in other PLs, 1 in RMN
varX <- x[mid..last]
varX <- x[first+1..last]

mut i32 x <- -1
u8 x <- 1 // only positive nums
u16 x <- 1 // only positive nums
u32 x <- 1 // only positive nums
u64 x <- 1 // only positive nums
u128 x <- 1 // only positive nums
uint x <- 1 // only positive nums
bool x <- false
mut bool x <- false
str x <- "str on stack"
string x <- "string on heap"
string x <- """ this 
is a multi line
string on heap"""
char x <- 'C'
f32 x <- 12.3442375676459832
f64 x <- 12.3432456642756438598432968578
f128 x <- 12.3485624987654876585682753598749875425943
float ðŸ¤£ <- 12.34 // UTF-8 encoding
x <- (1 2 3 4 5) //tuples
x <- (1 2 3 4 5) //tuples


// instead of null
opt x <- x.failure
opt x <- x.success

// type casting
"12" as i8
!! type conversions that cause data loss are not allowed

// pointers and addresses (smart by default)
//


// native Test driven development approach (inner tests, scope tests)

    // inner tests
    #test x == x'
    #test x != y and B > 4 // within first few lines of a function

    // scope tests

    

logical operators
    and , in other PLs &&
    or  , in other PLs ||
    not , in other PLs !
    XOR , short for â€œexclusive-or
    ==
    !=
    <=
    >=
    <
    >
// bitwise
    | or
    & and

// bitwise shift
    <<
    >>
// mathematical
    +
    -
    *
    %
    ^ // power
// assignments
    +=
    -=
    /=
    *=


#attributeName
#test

loop [n = iter count(optional)]
    if n [condition]
        break
    else if [condition]
        continue
    else
        return 0


loop index in collection
    // element of collection


loop [condition]
    // do stuff
    [pattern] ? [do if true] : [do if false]
    continue
    break


loop startIndex..endIndex:stepSize
    // do stuff
    [pattern] ? [do if true] : [do if false]
    continue
    break

loop once
    // iterate once 
[condition]


loop i <- 1..5, j <- 2..10:2
    log " $i , $j "


enum name
    x
    y: 12
    z

name->x


match pattern
    x
        // do stuff
    y
        // do stuff
    z
        // do stuff


match check_condition
    true, success 
        //do stuff do stuff do stuff
        //do stuff do stuff
        //do stuff

    false, failure
        // do stuff



// function name must start with lowercase, except Main function
// the function body must have one line space from the signature

fun name_name(arg: type , arg2: type = defaultVal , arg3: type ) -> return_type

    // do fun stuff
    return x

fun name(arg: type , arg2: type = defaultVal , arg3: type ) -> auto

    // do fun stuff
    return x


// if function returns nothing, the returnType is empty
fun name(arg: type , arg2: type = defaultVal , arg3: type )

    // do fun stuff





trait
    sortable <- int,uint,char,float
    addable <- int, uint, float
    sexy <- ptr,adr
    
    fun bubble_sort|T: sortable|(arr: [T]) -> [T]
        
        uint n <- len(arr)
        loop i in arr:
            loop j in range(first..n-i-1):
                if arr[j] > arr[j+1]:
                    swap(arr[j], arr[j+1])

        
// has function overload(same name but different args)
fun name|T: sortable,addable | U: sexy | ( arg: T, arg2: U ) -> U

    // do stuff
    return U



scope Name
// do stuff
// scope does the same as namespaces in C++, to avoid naming conflicts&...
// and helps with memory life  time annotations
// and the mod in rust, module...




obj name
    constructor()

        // do initializing stuff
    deConstructor()

        // do ending stuff

    pub :
        bol isAlive 
        int age 
        str name 
        fun += 
        fun %= 
        fun *= 
        fun /= 
        fun -= 
        fun getOld()

            age += 1

        fun getYoung() 

            age -= 1

        fun changeName(name: str)

            name <- name // can differentiate by syntax highlighting

        fun revealId()

            log securityNum
            log isSpy
            log grade

    int securityNum
    bool isSpy
    char grade

    inherits
        from baseObj4
        from baseObj1
            not variableName, secondVarName
            override variableName <- 43
            override base1func(args)
                // stuff
        from baseObj2


obj | T: sortable,sexy | V: addable | genericName 

    constructor(are: T, arg2: U)

        // do initializing stuff

    deConstructor()

        // do ending stuff


string sayCrap <- x >= 12 ? log "Fuck" : log "Shit"



obj name <- name: "Raman"
            age: 22
            isAlive: true 


std->baseObj.funName() //routing syntaxes

heap x <- 1,3,3,8
stack x <- 2,0,5,5
queue x <- 4,3,5,2
x.pop()
x.dq()
x.heapify()

------ ownership rules -----------
// out of scope, out of memory
// in each scope, only one owner 
// heavy in heap(composite data types), slim in stack(primitive data types, fixed size collections of primitive types
    function pointers, can copy slims)

