fun Main:

    log "Hello world"

    // do stuff
    // it can execute like JS & PY(notebook by notebook) or like C,C++,Rust(from Main)


global const int PI <- 3.14159

static int count <- 0

auto x <- anyType
int x <- -1
uint x <- 1 // only positive nums
bool x <- false
str x <- "String"
char x <- 'C'
float x <- 12.34
smrtptr x <- variableName
deref(x) , addr(x)
// instead of null
opt x <- x.failure
opt x <- x.success

loop [n = iter count(optional)]:
    if n [condition] :
        break
    elsif [condition] :
        continue
    else :
        return 0
    

loop i in array:
    // element of collection

loop [condition] :
    // do stuff
    [pattern] ? [do if true] : [do if false]
    continue
    break


loop once:
    // iterate once 
[condition]


enum name:
    x
    y: 12
    z


match pattern:
    x-> // do stuff
        // do more stuff
        // do more stuff

    y-> // do stuff
    z-> // do stuff




// function name must start with lowercase, except Main function

fun name(arg: type , arg2: type = default val , arg3: type )-> return type : 
    // do fun stuff
    return x


trait: 
    sortable: int,unt,char,flt
    addable: int, unt, flt
    sexy: ptr,adr

genfun name|T: sortable,addable | U: sexy |
    ( arg: T, arg2: U )-> U :

    // do stuff
    return U


obj name :
    pub :
        bol isAlive 
        int age 
        str name 
        fun ++ : //++ operator overload
        fun getOld() : 
            age++
        fun getYoung() : 
            age--
        fun changeName(name: str):
            name <- name // can differentiate by syntax highlighting

    inherits :
        from baseObj4
        from baseObj1 :
            not variableName
            override variableName <- 43
            override base1func(args) :
                // stuff
        from baseObj2


auto sayCrap <- x >= 12 ? log "Fuck" : "Shit"


heapy obj name <- name: "Raman", age: 22, isAlive: true 

