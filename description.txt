#the grand rule of ALL is "do not make it harder to be simpler"
make software as simple as possible, free the resources to build greatness not fix shit bugs
focus is on great software, train great programmers to write great programs
beginners can write standard pseudo code the execute it with the NN, path to greatness
continues by coding in RMN(a heart surgeon(specialist) mos study body anatomy first(generalist))
professionals must not do beginner things and beginners must not do professional things
learn to use hammer before nail gun


--------------FEATURES----------------
tip = heavy features will be implemented in the SIDE to let the Core RMN stay light

# performance and memory safety (borrowing and ownership(modified),lifetime annotations , ARC,an analyzer that tells you when to free what, runs the code first on a 
	memory sandbox to detect leaks & more... . are provided by the SIDE and do not add any burden to the Core lang or final exe). so the core language can compile with any C compiler

# strong and static type system

# (low to high level) support for distributed computing and GPU computing
# HACK mode(fast demo, beginner) and Production mode(safe, fast , ...)
# support : imperative(procedural , OOP) and declarative(functional, logic, mathematical, reactive)
# use UTF-8 
# has a project map: import trees and ... to understand the proj struct
# native TDD approach
